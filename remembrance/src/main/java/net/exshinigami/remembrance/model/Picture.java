package net.exshinigami.remembrance.model;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
import java.util.Date;

import de.greenrobot.dao.DaoException;
// KEEP INCLUDES END
/**
 * Entity mapped to table "PICTURE".
 */
public class Picture extends BaseEntity  implements Savable {

    private Long id;
    /** Not-null value. */
    private String name;
    private boolean uploaded;
    /** Not-null value. */
    private java.util.Date created;
    /** Not-null value. */
    private java.util.Date updated;
    private boolean enabled;
    private long userId;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public Picture() {
    }

    public Picture(Long id) {
        this.id = id;
    }

    public Picture(Long id, String name, boolean uploaded, java.util.Date created, java.util.Date updated, boolean enabled, long userId) {
        this.id = id;
        this.name = name;
        this.uploaded = uploaded;
        this.created = created;
        this.updated = updated;
        this.enabled = enabled;
        this.userId = userId;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getName() {
        return name;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setName(String name) {
        this.name = name;
    }

    public boolean getUploaded() {
        return uploaded;
    }

    public void setUploaded(boolean uploaded) {
        this.uploaded = uploaded;
    }

    /** Not-null value. */
    public java.util.Date getCreated() {
        return created;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setCreated(java.util.Date created) {
        this.created = created;
    }

    /** Not-null value. */
    public java.util.Date getUpdated() {
        return updated;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setUpdated(java.util.Date updated) {
        this.updated = updated;
    }

    public boolean getEnabled() {
        return enabled;
    }

    public void setEnabled(boolean enabled) {
        this.enabled = enabled;
    }

    public long getUserId() {
        return userId;
    }

    public void setUserId(long userId) {
        this.userId = userId;
    }

    // KEEP METHODS - put your custom methods here

    @Override
    public long save(DaoSession daoSession) {
        return daoSession.getPictureDao().insert(this);
    }

    @Override
    protected void setDefault() {
        Date today = new Date();
        setCreated(today);
        setUpdated(today);
        setEnabled(true);
        setUploaded(false);
    }

    public static Picture get(DaoSession daoSession, long id) throws DoesNotExist{
        Picture picture =  daoSession.getPictureDao().load(id);
        synchronized (Picture.class) {
            if (picture == null) {
                throw new DoesNotExist();
            }
        }
        return picture;
    }

    public static Picture getOrCreate(DaoSession daoSession, long id, String name, long userId) {
        Picture picture;
        try {
            picture = get(daoSession, id);
        }catch (DaoException|DoesNotExist e) {
            picture = create(name, userId);
            picture.save(daoSession);
        }
        return picture;
    }

    public static synchronized Picture create(String name, long userId) {
        Picture picture = new Picture();
        picture.setDefault();
        picture.setName(name);
        picture.setUserId(userId);
        return picture;
    }
    // KEEP METHODS END

}
