package net.exshinigami.remembrance.model;


import java.util.Date;
import java.util.List;

import de.greenrobot.dao.DaoException;
import de.greenrobot.dao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS
// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table "USER".
 */
public class User extends BaseEntity  implements Savable {

    private Long id;
    /** Not-null value. */
    private String mobileNumber;
    /** Not-null value. */
    private String type;
    private long smsCount;
    private long spamCount;
    /** Not-null value. */
    private java.util.Date created;
    /** Not-null value. */
    private java.util.Date updated;
    private boolean enabled;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient UserDao myDao;

    private List<Message> messageList;
    private List<Picture> pictureList;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public User() {
    }

    public User(Long id) {
        this.id = id;
    }

    public User(Long id, String mobileNumber, String type, long smsCount, long spamCount, java.util.Date created, java.util.Date updated, boolean enabled) {
        this.id = id;
        this.mobileNumber = mobileNumber;
        this.type = type;
        this.smsCount = smsCount;
        this.spamCount = spamCount;
        this.created = created;
        this.updated = updated;
        this.enabled = enabled;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getUserDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getMobileNumber() {
        return mobileNumber;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setMobileNumber(String mobileNumber) {
        this.mobileNumber = mobileNumber;
    }

    /** Not-null value. */
    public String getType() {
        return type;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setType(String type) {
        this.type = type;
    }

    public long getSmsCount() {
        return smsCount;
    }

    public void setSmsCount(long smsCount) {
        this.smsCount = smsCount;
    }

    public long getSpamCount() {
        return spamCount;
    }

    public void setSpamCount(long spamCount) {
        this.spamCount = spamCount;
    }

    /** Not-null value. */
    public java.util.Date getCreated() {
        return created;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setCreated(java.util.Date created) {
        this.created = created;
    }

    /** Not-null value. */
    public java.util.Date getUpdated() {
        return updated;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setUpdated(java.util.Date updated) {
        this.updated = updated;
    }

    public boolean getEnabled() {
        return enabled;
    }

    public void setEnabled(boolean enabled) {
        this.enabled = enabled;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Message> getMessageList() {
        if (messageList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MessageDao targetDao = daoSession.getMessageDao();
            List<Message> messageListNew = targetDao._queryUser_MessageList(id);
            synchronized (this) {
                if(messageList == null) {
                    messageList = messageListNew;
                }
            }
        }
        return messageList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetMessageList() {
        messageList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Picture> getPictureList() {
        if (pictureList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PictureDao targetDao = daoSession.getPictureDao();
            List<Picture> pictureListNew = targetDao._queryUser_PictureList(id);
            synchronized (this) {
                if(pictureList == null) {
                    pictureList = pictureListNew;
                }
            }
        }
        return pictureList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetPictureList() {
        pictureList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here

    @Override
    public long save(DaoSession daoSession) {
        return daoSession.getUserDao().insert(this);
    }

    @Override
    protected void setDefault() {
        Date today = new Date();
        setCreated(today);
        setUpdated(today);
        setEnabled(true);
    }

    public static User get(DaoSession daoSession, long id) throws DoesNotExist{

        User user = daoSession.getUserDao().load(id);
        synchronized (User.class) {
            if (user == null)
                throw new DoesNotExist();
        }
        return user;
    }

    public static User get(DaoSession daoSession, String mobileNumber)
            throws DoesNotExist{
        QueryBuilder query = daoSession.getUserDao().queryBuilder();
        query.where(UserDao.Properties.MobileNumber.eq(mobileNumber));
        User user;
        try {
            synchronized (User.class) {
                user = (User) query.uniqueOrThrow();
            }
        }catch (DaoException e) {
            throw new DoesNotExist();
        }
        return user;
    }

    public static User getOrCreate(DaoSession daoSession, String mobileNUmber, String type) {
        User user;
        try {
            user = get(daoSession, mobileNUmber);
        }catch (DoesNotExist e) {
            user = create(mobileNUmber, type);
            user.save(daoSession);
        }
        return user;
    }

    public static User getOrCreate(DaoSession daoSession, long id, String mobileNumber, String type) throws DoesNotExist{
        User user;
        try {
            user = get(daoSession, id);
        }catch (DaoException|DoesNotExist e) {
            user = create(mobileNumber, type);
            user.save(daoSession);
        }
        return user;
    }

    public static synchronized User create(String mobileNumber, String type) {
        User user = new User();
        user.setDefault();
        user.setMobileNumber(mobileNumber);
        user.setType(type);
        return user;
    }
    // KEEP METHODS END

}
